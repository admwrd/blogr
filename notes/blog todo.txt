

SCSS
	Find timestamp of the consumer css file and find the created date
		look in git repo for all changes made after the created date

	Maybe benchmark string != "" vs string.len() == 0  for empty string checks

Non-Blog
	What is high logic font manager thing program

	Maybe add a semi-transparent diagnal 'tv-lines' type stripe going over the sphere

	Put a nearly invisible watermark on the 3d sphere and make a page for it

	Modify the 3d sphere to have like a red outline or something different

Articles
	Add the jqMath javascript library

	Add all of the javascript and css packages/modules/plugins/scripts that I use
		jquery
		highlight.js
		toc jquery plugin
		fancybox jquery plugin
		clipboard
		hljs-line-numbers
		remarkable
		toast jquery plugin
		bootstrap

	Change the link to Configuring A VPS Webserver in the Rust VPS guide to the new article
		change the link to use whatever aid of the new article is

Server
	Maybe make a backup script that takes a name of the backup
		it will create a folder with the given name in the /home/vishus/backups folder
		then run something like:
			cp target/release/blogr ~/backups/<backup_name>/blogr-exe
			cp Cargo.toml ~/backups/<backup_name>
			cp Rocket.toml ~/backups/<backup_name>
			cp -r pages ~/backups/<backup_name>
			cp -r notes ~/backups/<backup_name>
			cp -r logs ~/backups/<backup_name>
			cp -r scripts ~/backups/<backup_name>
			cp -r build.sh ~/backups/<backup_name>
			cp -r production.sh ~/backups/<backup_name>
			cp -r run.sh ~/backups/<backup_name>
			cp -r src ~/backups/<backup_name>
			cp -r templates ~/backups/<backup_name>
			cp -r static ~/backups/<backup_name>
			sudo cp -r private ~/backups/<backup_name>

Blogr-Fixes
	Change the menu items for pageviews to pagestats

	FIX setup-vps PAGE - javascript popup appearing when it shouldn't?
	
	Add modified date to template module and contexts as well as in the templates

	Log ip addresses for error pages
		Make a new BlogErrors structure that tracks:
		Internal 500 errors: HashMap<page, (datetime, ip, message)> or Vec<page, datetime, ip address, message>
		NotFound 400 errors: HashMap<page, (datetime, ip)> or Vec<page, datetime, ip address>

	In the pagestats admin page make a link to all 404 errors
		the 404 error should 

	Add a hide article button to admin page
		change all other pages to look for hide = 0 in the SQL statements
		Edit 'add article' and 'edit article' to have a stage field
		Edit admin page to sort by stage.

	Rename tags to topics

	Eventually convert counter artithmetic to use wrapping_add() or somethign similar

	Make a route to refresh the cache PageContext's as well as clear the ContentCacheLock
		How to change the ContentContext HashMap?  I don't think it's mutable...

	Find out how to pass the real client's ip address from NGINX to the Blog web app

	Maybe allow multiple URI's for static pages
		when parsing metadata make a vector of URI's (Vec<String>)
		create another PageContext HashMap that references 

	Add meta tag generator
		<meta name="generator" content="MediaWiki 1.31.0-wmf.15"/>

	May need to write some javascript to automatically add FancyBox to images in articles

	In static page menu items iterate through json links and replace {{BASE_URL}} with BLOG_URL and {{BASE}} with BASE

	Try converting PGCONN to a RwLock instead of Mutex

	Make favorite icons (32x32, 48x48, 128x128, 192x192)
	
	Learn how to use branches in git so development can be done in one branch 
		and when it compiles and is stable/ready be merged to the stable master

	Add the Accept and Express modules as pages
		use the /code/accept.html and /code/express.html (or .rs instead of .html) routes

	Maybe add a database field like `visible` or `hidden` that specifies which articles are shown in
		- hide in the article listing on the main page
		- hide in articles by author
		- allow in articles by tags
		- allow in tag cloud
			- NO - Tag Cloud (do not count/add tags from hidden articles)
		Change the SQL code to something like `SELECT ... FROM articles WHERE ... AND visible = true

	TESTED: works - Test if Referrer contains query strings or not - IT DOES

	Add hbs_dashboard_admin_retry_redir_user to list of Rocket functions in main()
	
	Change all admin pages to redirect to admin route if they are not logged in as an admin

	Maybe remove all html tags and stuff from flash message contents before sending it to the template
		Prevents malicious code
		Could also change alert_danger (and other alert_*()'s) to sanitize any html input

	Add link to go back to manage after saving or even before saving
		if contents have changed ask user if they want to continue

	Add a loading spinner to loading images
		Can use font awesome maybe
		Article header images:
			Lower margin-top of title bar and place text above title box

	CLEANUP FILES!

	Add more address bar color changes for other browsers like apple and ms

	Suppress console messages unless they are errors (remove SQL messages for production)
		check if PRODUCTION is set, if it is do not print the message

	Find out how to prevent a specified file from being included in the git repo
		like src/settings.rs
		but also make a settings.example.rs that is included but does not include passwords or sensitive data

	Make a disclaimer page saying I am not responsible or liable for damages or anything caused by using 
		the code on the website or following the suggestion.
		All opinions are my own and do not reflect any corporations or companies that may be mentioned

	Privacy policy:
		does not sell or transfer any information obtained by client

	Do not allow custom commands as a security mesasure

	Make SEO friendly article links replace spaces with hyphens

	Add domain name configuration to the vps guide and commands text files

	Cleanup source code and remove old comments
	Remove pagination test, hit counter tests, and other page tests

	Convert all pages that look for flash messages to use process_flash
		let flash = process_flash(flash_opt);

		For pages that display flash messages, use different alert_* functions for different flash msg names
			for error flash messages use alert_danger()
			for warning flash messages use alert_warning()
			for success flash messages use alert_success()
			for all others use alert_info()
				see the /manage route for an example
	
	Figure out how to add version badge to github readme.md file

	Add content to the about me page.
	
	Convert blogr to ssl

	Force SSL unless in Dev mode

	When creating a blog post fails for reasons other than unauthorized
		(or maybe even if its unauthorized)
		redirect back to create page with all of the form data filled in
		change the insert form template to include if statements to show msg
			{{#if info.msg}}{{{info.msg}}}{{/if}}

	sanitize:
		login rety (admin and user): username and failmsg
		tag?<tag>: sanitize split_tags


Blogr-Features
	Maybe eventually change the metadata parsing function is the content module for static pages
		make the function take a &Path (reference to a path) and its parent callees
		this will allow automatic uri and title generation, allowing the metadata function
		to handle every markdown related file

	Create a unique hits counter that [asynchronously] adds ip addresses of visitors
		to a HashMap<String, Vec<Ipv4Addr>
		The number of entries is the number of unique hits
		UniqueHits(pub String, pub usize, )

	Add better SEO links, could even  use new handlebars helper functions to do so
		to use handlebars helpers blog must be upgraded to rocket 3.6 first

	Add sitemap generator, looks at database and the pages folder

	Show top pages for each tag category
		Use the hit counter for this, 
		get the aid's of the top articles of all time or in a given tag (in tag cloud)

	Add a hide article button to admin page
		change all other pages to look for hide = 0 in the SQL statements

	Maybe add an External Icon to all outside links (to links outside vishus.net)

	Add a recent posts module/function
		modify header/footer and static page templates accordingly
		add recent posts to template contexts

	Maybe add an admin page to approve/publish article drafts

	Maybe add an admin page to upload files and maybe even manage them?
		choose folder to upload file to:
			/ (web root)
			/assets /assets/bg /assets/fonts /assets/imgs
			/imgs (for fractals)
			/upload

	Eventually replace database queries for articles with some kind of cache system
		make functions to retrieve the article id's for the page
		when requesting article(s) retrieve the cached article(s)
	Could use the xpress module for the cache system
	Create a type that contains:
		
		xpress should call the pagination functions from within 
	Could have a thread that sleeps for an hour, checks for new/updated articles
		keeps a variable of last update
		chceks for updates by checking for articles modified after last update
		if new content run update function

	Maybe add perma-links / short-urls
		vishus.net/p/RaND0m
			allow optional route for /Search-Engine-Optimization

	Eventually make a lib.rs alongside the main.rs (in same folder) to allow both lib and bin
		The lib.rs library should contain most of the modules
		The main.rs binary should have the code to execute the program, should be very small

	Add a page to unlock locked accounts

	Add css styling and layout support for the following bootstrap items: 
		figures & asides, cards, carousels, jumotrons, listgroups?, popovers, scrollspy, tooltips

		for scrollspy: collect all <h1> tags, add id's to them, and make a table of contents

	Add comments
		Authorization
			Only logged in users/admins can make comments
				do not need to be user if logged in as admin
			Make a setting that enables/disables users being able to edit/delete their own comments
				if there are replies to it the body text is just replaced with [[deleted]]
			Admins can edit or delete comments
			Admins can also mute a user for a period of time (in days) or ban a user for good
		Replies
			Either group replies together
			quote original message (and keep chronological order)
			or have no replies
		Likes
			Add ability to "like" or "star" each comment, each user can only mark each comment once
		Captcha - Not For Comments
			Add captcha to user sign up page, but not for making a comment
		Approval
			Maybe have a setting that puts all comments into an approval queue
			make an admin page to mass approve comments
				radio to approve or delete by each comment
				make buttons that change all radio boxes to approve and one to delete
		Limit Comments
			Limit the amount of comments a user can post in a given time period

	Make a page that lists articles by date, group by month maybe

	Add user signup page

	Create a signup page
		ensure the user enters a password with a min length etc

	Create a page to edit the signed in user's data.
		Could make the template check if the client is logged in as:
			administrator: show settings for editing admin user info
			regular user: show settings for editing basic user info

	Convert user login to use login redirect

	Make a login redirect page
		/login-user  and  /login-admin
		could use either query string or embed it in the route using /login-user/page/here
		prolly query string since no need for pagination
		Use the http referrer, and create a new template with a hidden input field to store the referrer
			Do not create new template, create new enum field for LoginData that uses the login template
				but adds a HashMap to the context which will be stored as hidden fields (name/value)
		NOT NEEDED - Modify the flash_redirect methods for ral_administrator and ral_user to look for query string

		Change hbs_dashboard_admin_retry_user() to take a redirect parameter to redirect the user upon successful authentication
		Change the err_redir argument to flash_redirect() in the pages module to redirect to /admin?redir=/path/here&user=username
		Finish working on hbs_dashboard_admin_retry_redir
			Add a QueryUserRedir struct that is similar to QueryUser but with a String redirect field
		Allow llinks to not redirect back to original page (like menu links may do this
			Maybe make a separate route or check if redirect == "authonly" or something like that

	Make an admin page that can run different scripts that are in the `scripts` directory
		allow arguments to be passed to the command and maybe even specify default arguments

	Reorganize Modules
		Split Blog module into several modules
			ArticleId
			Article
			ArticleDisplay
			ArticleForm
			ArticleWrapper
			GenTimer
			NaiveDateTimeWrapper
			Search
			SearchDisplay
			Sort
			SortDisplay
			Tag
			User
			ViewPage


Rocket-auth-login
	Build docs

	Fix warnings
		Remove environmental variable preventing warning messages - then build again

	Update examples to use the new &mut Cookies for .redirect() and .flash_redirect() as well as ::delete_cookie()
		Publish with new version number

	Add repository url link in the Cargo.toml file
	
	Cleanup the administrator.rs module in the tls_example
		Remove the password module
		Cleanup all the commented-out old byte vector password code

	In examples make sure in the process route that the inner form variable is typed:
		let login: AdministratorForm = form.into_inner().form;

	In examples, in the administrator module change the folowing
		cookies.remove_private(Cookie::named(AdministratorCooklie::cookie_id()));
		to
	        Administrator::delete_cookie();
	
	Check the OWASP guide and also check which characters are in the unicode categories
		allowed by the sanitize functions, basically just make sure they're secure


orange:   #de6d11
dark ora: #853c01

Favorite Header Images:
	1	feathers
	2	sci-fi
	3?	fire
	6	green sphere things
	10	red abstract


Compile for production:
	#!/bin/bash
	 cargo rustc -- --cfg production


Blog Theme
	Turn off/cleanup console messages in production mode
		use if cfg!(not(production)) { println!(...); }

	Font awesome icons to use:
		linode
		rocket
		rss in the rss link
		font awesome
		git
		html5
		linux
		firefox chrome edge opera internet-expolorer
		cubes		for cargo

		fa-picture-o	create/edit image	<i class="fa fa-picture-o" aria-hidden="true"></i>



v-icon-preview, v-icon-reset, v-icon-preview-end, v-icon-save, v-icon-tags, v-icon-tag 
v-icon-image, v-icon-copyright, v-icon-title, v-icon-date, v-icon-sort, v-icon-author
v-icon-stats, v-icon-sort, v-icon-sort-title, v-icon-sort-date, v-icon-user


v-icon-at, v-icon-rss, v-icon-pagegen


	Cool animated font awesome loading icons:
		http://fontawesome.io/examples/#animated
		fa-spinner, fa-refresh, fa-circle-o-notch, and fa-cog with the fa-spin (smooth rotate) or fa-pulse (8 step rotate)
	Stack font awesome icons:
		http://fontawesome.io/examples/#stacked
		use <span class="fa-stack fa-lg"> for large
			fa-lg (33% increase) fa-2x fa-3x fa-4x fa-5x (make sure to have enough line-height if icons are cropped)



	cancel siteground hosting from renewing - use support to find out how to stop automatic renewal

Design:
	Figure out a way to make the middle box backgrounds transparent and the outside black still
		This allows a static background to be placed that will move with the page, 
			staying in the same position on the screen at all times
			only the content boxes moves, allowing their inside to display the image


Security
	Could have a possible seuciry vulnerability in the admin create/edit pages
		the FromForm impl for ArticleForm truncates long titles, tags, and descriptions
		if the sequence cuts off between two single quotes it could be bad...
			...end of text''
			if the 250th character is the first single quote, then the sql string containing
				the text would be quoted instead! Oh no's!

Future Todo:
	Could change templates module to take the TemplateBody enum and separate the variants into their own data structures

	Add pageviews template?

	Can the line numbers be made to not scroll when lines of code are too long?
		Could use either
			http://www.fixedheadertable.com/
			or creating a new table with just the line number column over the table
				maybe use something like position: absolute

	See if rocket can tell whether its https or http and subdomain stuff?
		Find a way to have a single rust rocket app deliver both https and http content
		https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
		http://nginx.org/en/docs/http/ngx_http_core_module.html

	Figure out how to make a git repo on the server that can have files transfered to it that reflect the repo
		maybe a script that will run

	Convert the current css file to scss files
		make an assets folder with:
			images
			javascript
			stylesheets
			fonts
			(etc)

	Maybe make logins case insenitive in regards to username
		could just make the register page create all users with lowercase username
			then lowercase the username in the auth query or when saving to form data


	In the /admin and /users routes add db column to retrieve the number of login attempts before calling flash_redirect()
		then display the attempts in the flash message if the attempts is more than just a few or under MAX_ATTEMPTS
	Somehow keep track of previous login attempts after logging in
	or Add a message to the flash message upon successful login telling the user how many login attempts have been made
		the purpose is to alert the user to any attempts to brute force or guess the user's password


	Do RSS feeds have to show all the items?
		Can it show the 50 most recent and any old items will persist in the RSS reader?
			Or will rss reader remove them once no longer in the feed?

	Publish the xpress module 


	Make a database cache that is updated every 4 hours or on demand by a special route that caches:
		all normal unfiltered select queries
			also query sort by title as well as date, both asc and desc
		queries for each tag in the tag cloud, or the top 200 tags
		tag cloud
		queries for each author
		do not query authorization queries
		
	Database: Add a date modified column to the articles table
	
	Data Structures: Add a date modified field to the Article* structures

	Eventually change the hbs_templates to have the flash message in the general parameters/info not in the TemplateBody

	Convert structs containing strings to &str
		See below for example
		https://api.rocket.rs/rocket/request/trait.FromParam.html
	
	Add unique visitors
		Maybe create a file or in-memory list of ip addresses
			every once and a while write them to database
		IP Address Fairing Example:
			https://github.com/lukaspustina/ifconfig-rs/blob/master/src/fairings.rs
		Rocket Request.remote() method
			https://api.rocket.rs/rocket/struct.Request.html#method.remote

	Track page views and unique visitors

	
	Maybe add last_build_date as last modified date for the channel
		https://docs.rs/rss/1.1.0/rss/struct.ChannelBuilder.html#method.last_build_date
		Builder:
		https://docs.rs/rss/1.1.0/rss/struct.ItemBuilder.html#method.pub_date

	Add etags to articles
		set ttl to enable the caching thens
		The hash should be: hash(title + current datetime)
		Do not need to hash body contents, will just be slower, datetime will make it unique
		Could retrieve hash from database in a query or by hashing in Rust, either way
	
	Add last modified (and created, if exists?) http headers to individual article pages
		Maybe add a last modified header to articles page where the last modified
		date value is the newest date of all the article dates
	

	Allow modifications to user info
		GET /users
		GET /user?<userid> - userid: UserId
		POST /user	// saves changes to display email and any other properties
		Create a Users page that shows all users with public profiles
			add a is_public bool to the user table in the database
		Create a show user page that displays user information
			create a UserId struct with a single username attribute
			if the user has is_public set to false only admins can see it
			Show Username link, and emai
			if the viewer is an admin show a checkbox to change the is_admin field
			if the logged in user/admin is viewing their own page
				allow them to edit their information
				allow password to be changed
					add a hidden username form field
	
	
	Test the current method of finding the generation time (Instant::now() and start.elapsed())
		Chrono's Duration.span() runs a closure and returns the time it took to run the closure
		
		
		
		NOT the Time crate, it is deprecated.
		against the Time crate's SteadyTime and PreciseTime
			Benchmark how fast each is, and how accurate each is
			Run Benchmark Tests with thread::sleep
				use std::thread::sleep;
				sleep(Duration::new(secs, nano_secs))


	Write article about better way to organize template stuff
	Possibly rewrite the template system interface to expose something like
		hbs::info(title, page, hbs::general_page(contents) )
			.add_user(user)
			.add_admin(admin)
			.add_timer(start)
			.add_javascript(js)
			.change_something()
			.add_something_else()
			.finalize()
		only rewrite if really really need extras


	Look into Handlebar Helper functions using Rocket_Contrib's Templates
	IMPORTANT
	Research NoSQL databases which could be faster
		Maybe even redis

	Cache all HTML output from pages using database queries
		Allow different versions of the page to be cached
			Cache brotli, gzip, deflate, and uncompressed versions of the page
			Only cache the page with a given compressino method when page is requested
				with a given compression method
		Add an option in the hbs_template() that indicates whether it should
			look for and store cached results
			Maybe the option should be an Option<u32> indicating how many 
				minutes to store the cached contents
		Use Redis
		Or other caching tools

	Add search functionality
	
	Add a signup page

	Add pagination

	Build a search form with search term, min and max date(time), and tags

	Add editing and deletion capabilities for admins

	Add comments
	Add ability to reply to a specific comment
	Maybe add ability for admins to reply to a comment with a special styling, 
		like on newegg when companies reply to a comment about a problem
	Display a form allowing users to make new comments and edit and maybe delete their own
                                                                                                              
	Maybe when validating forms, set focus to first invalid form field
		set a var called something like is_focused = true after first field
		to prevent others from being focused


Research Futures
	try to implement caching by calling a function that returns a string and schedules an async function
	to write the string to a cache afzter the string is returned to allow the webpage to load while the 
	string is being written to the cache


Rocket-auth-login:
	BEFORE PUBLISH:
		change font demonized to another freeware font as demonized is personal-use
		the quicksand font is freeware and prolly doesnt have to change
	Add description and other settings to Cargo.toml file
	
	NOT DONE - Decided not to do this as the example are excluded from the actual published crate
	Add [[bin]] sections to the root crate's Cargo.toml



DONE
	Change pagestats to iterate over the counter structure rather than unique stats
		then get unique stats entry for that route

	Add ability for admins to download error logs
	
	Make option in new pagestats page to view error pages or not
		Show unique visitors, average visits per client/ip-address, num total hits
		

	Rust Snippets page isn't highlighting all code snippets correctly, I think

	Add IP Address related stats to the pagestats admin page
		add number of unique visitors for each page
		calculate the average number of visits for each user
			iterate a given page's ip address map
				add up all of the visits
				then divide by the len() of the page's ip address map
		Could iterate over the pages map, then iterate over each ip address entry

	Add the requested uri to the ContentRequest struct
		allowing the current page's link in the template to be higlighted


	the /tag/<tag> route seems to call an image from /tag/assets/sphere-trans2.png
		fix this to call from root dir

	empty tags still seem to appear in the tag cloud

	change UniqueHits to hold an instance of Hits
		inside he UniqueHits responder call the Hits responder
		change the UniqueHits::new()'s println to print out modified struct info
	call Uniquestats::load() in main when creating the state variable
	every HITS_SAVE_INTERVAL (use total hits from Hits (last - hits.2)) call the save() method

	Implement serializing/deserializing the UniqueStats to allow it to be saved and loaded

	Track ip addresses?

	On image when using a mobile devices add a growl/toast message 
		telling user to swipe up or down to close image

	Add MathJax 

	Add background image to edit and create templates
		style="background: url('{{base_url}}assets/sphere-trans2.png') no-repeat center center fixed"

	Figure out why the code is not geting highlighted on non-article pages and fix it
		I am guessing it is because the hljs is not being called or something??

	DEFERRED until I find a good, lightweight, jquery 3.2.1 compatible message plugin
		Maybe when copying text add a little message at bottom right of page saying text copied
		or even "x bytes copied"

	Potentially index all header tags (<h1> through <h6>)
		First header tag starts a list
		for every same header level put a new list item
		for every lower header level add a new unordered list for that level
		for every higher header level, go back to the list of that level

		Search for header tags after rendering markdown html
			otherwise the markdown headers will not show up

		Build TOC with javascript/jQuery
			add javascript to the page-template and article-template 
				or the call to hbs_templates for the individual articles

		Make use javascript to build a TOC using lists, and check the levels 
			and depth to ensure the correct placement of lists and items
			The TOC is stored as a floating nav/list element that can be later
				attached somewhere when finished, but until finished being
				part of the DOM allows more information to be gathered dynamically

		Articles: v-article-content
		Static Pages: v-content

		For individual articles add js:
			$(document).ready(function() {
				$('#toc').toc({
					content: "div.v-article-content", 
					headings: "h1,h2,h3,h4,h5,h6",
				        elementClass: 'toc',
				        ulClass: 'nav',
				        heading: 'Table of Contents'
				})
			})

		Example:
			h1 - cats
				h2 -cat toys
					h3 -wands
					h3 - balls
						h4 - tennis balls
						h4 - jingley balls
						h4 - catnip balls
						h4 - treat balls
					h3 - stuff toys
				h2 - cat food
					h3 - wet food
						h4 - wellness brand
						h4 - dave's brand
					h3- dry food
						h4 - purina
							h5- indoor
							h5- original
				h2 - cat furniture
					h3 -cat mansions
					h3 - cat perch

	Generate a menu with the table of contents of the article
		Find all <h1> elements and make a table of contents using the headers
		Could be generated upon creation and edit
			Either make a separate database column for storing the html for the table of contents
			Or make a section at the beginning or end (beginning may be bad because descriptions default to first 200 chars)
				that is separated by an HTML comment or something

	Regenerate assets (css, before) and minify after

	Maybe add a return to top link

	Figure out why title is not displaying for about/siteinfo static page (and others)

	Fix code styling on static pages - not the same as articles

	Maybe only enable hljs-line-numbers for larger code blocks, not small ones
		test for height() maybe?

	Maybe add {{base_url}} variable to articles
		replace all {{base_url}} instances with the BLOG_URL

	Make a download button for static code files
		it should take the body content and create a response with attachment

	Make static code pages' uri include the extension
	Load all files in the code folder using the page-code-template.html.hbs template
		change the description field in PageContext struct to the language used by hljs
		add a <pre><code class="html"> block to trigger highlight js

	If get_parts() fails, load all content as body and call load_simple()



	May be able to cache the static pages, rocket does not need to be launched 
		to handle local requests, right before launch call the cache function

	Test markdown and other static page/content metadata, including menus

	http2 optimized template is looking for fonts in /assets/css/fonts

	make a route that updates the context cache and content (page) cache
		call 
		ContentContext::load(STATIC_PAGES_DIR)
		ContentCacheLock::cache(rocket, STATIC_PAGES_DIR)

	Could eventually change the static pages to use the testing facilities instead of responders
		generate the page cache using the testing utilities instead of creating
			a data structure that holds information that is used to retrieve the file
			in the responder which will render the template and fill the cache

	Test regular header/footers against the HTTP2 optimized versions
		reminder: test on the webserver, this provides more realistic network times
			  AND the nginx reverse proxy uses HTTP2, the built-in server in the
			  blog app DOES NOT USE HTTP2
			  only on webserver can this be tested

	Add gentime to ContentRequest and calculate gentime before passing context to template
		Can use blank string; right before template is rendered calculate gentime 
		and update the gentime field

	Maybe add a couple variables in the static pages and maybe even regular articles
		   - something like {{BASE_URL}} gets replaced with https://some.com/
		add a javascript variable at the end of the page
			in the footer the after.js loads before the custom js
			so add the variable in the template itself and add a check in the
			after.js to see if it exists
				if exists replace all links in the body that don't start with
				www. http:// https:// ftp:// or another protocol
				check if it matches this: ^/|(?:www[0-9]*)|(?:\w*://)

	Add a template called content.html.hbs
	
	Add loading and retrieval methods to ContentContext to load all pages from a directory
	
	Maybe add a ContentHits HashMap to track how many hits each one gets
		could use a concurrent hashmap possibly
		his could be used to trim the cache when the size is too big
			when cache reaches or exceeds CONTENT_CACHE_LIMIT run a prune() method

	Could add arbitrary context to static pages by adding an extras field
		the extras field would be a json serialized Value
		which would be deserialized into a json Value and added to an extra field in the struct

	Maybe make static pages module a type
		in the route the function will define an Option<StaticPage> type as a parameter
		the StaticPage will use Request to cache Templates as bytes
			along with req.route() to figure out which page was requested
		if there was no page found for that route it returns a 404 or something
		
		I Think It's Time To Merge Yamltest Into Blogr

		But how to deal with mutex locking?
			could use Request to get State then lock it

	Add BASE (BLOG_URL minus the ending `/`) to all TemplateMenu's that are deserialized from JSON
	Add json serialized menu and dropdown_menu fields to PageContext
	Add admin and user fields to PageContext to specify that a page requires admin or user privileges

	Make yamltest look for different line endings based on operating system
		instead of a literal newline use \n and \r\n

	Test if byte vectors passed into a Template as context (a field like body being a Vec<u8> instead of String) produces string output
		or if the output of the byte vector is just numbers

	Give all <h1> elements id's with their value (replace all spaces with hyphens of course)
	
	On blog app startup load files from a directory and generate Template instances with the file contents
		Could also load on demand if the files get to be too big
		Could use either serialization or Rust source files
		Generate a Template or Express structure which is stored for quick responses
		Store the cached Templates/Express items in a HashMap or BTreeMap
		Allow access to the articles by something like /content/<url-title>
		Maybe store serialized menu and modify the basic template to create a menu
		Maybe make a parent field and if the parent field is not empty make a link to it
			parent-title
			parent-url
		Could use https://github.com/tilpner/includedir to include files at compile time
		Use Twoway

	Store:
		hbs template
		url-title
		article title
		body
		extra js
		description
	

	Create a minimal template with stripped down css that is used for code examples and other single-document items
		no checks for user login cookies
		no nav bars
		has logo still, maybe upper left corner of bubble box
		Tempplate context:
			page head title
			title
			url - used for title link
			gen time
			body
			last modified ???  Maybe if loading from files
			
	Remove console logs!

	Load articles from files into the Article template somehow
		could make the articles rust files, either using modules or include!()

	Maybe load articles from a folder
		Could use jekyll (layout, title, permalink, description, date, tags)

	Maybe make create page redirect user to new article page

	Remove async from head javascript (before)

	Move flash message option in templates method to the info part instead of the TemplateBody part
		Change all templates' {{~#if msg~}}{{msg}}{{~/msg~}} to use info.msg
		Change all handlebars {{#if msg}} to display {{{msg}}} (to show html)

	Make Edit link a button

	Remove map files from css/js assets

	Add line numbers to code

	Add javascript copy button to all code snippets (<pre><code>)

	Add image header and title stuff to create/edit pages

	Add bg img to body
		background: url("http://localhost:8000/assets/imgs/bg-dot-grid.png");

	IMPORTANT - Filter out non-image formats from the image drop-down box

	NO - make a datastructure that holds all values from a form
		with methods to convert to Article ArticleForm and ArticleWrapper
		put checks to make sure certain fields are filled in otherwise
			show a create/edit field with the submitted data filled in
		modify the create template to allow data to be filled in the input fields

	FIXED - Fix bug that causes program to crash when creating an article without all the fields
		or actually it may just return 422 unprocessable entry or something

	VPS
	Make a directory to run the executable
		copy the folders:
			logs
			scripts
			templates?
		and the fiels:
			Rocket.toml

	turn on the firewall
		uwf ???

	Update copyright to 2018

	Add link to pageviews page in admin page

	Verify and maybe change the generation timer to use 9 digits instead of 8

	Add article header images to articles
		add database column in articles table, if null use a default image
		set the image as a background so it fills the width of the container
		could add text?

	Maybe add another bubble inside the article bubble
		separate the title author date etc in one bubble
			and the article contents in another
		make the backgrounds
			rgba(80,80,80,0.1)

	For user account lockout due to repeated unsuccessful attempts make levels or tiers of locking
		after 6 attempts lock for 3 minutes
		after 12 attempts lock for 6 minutes (total not 12 more attempts [that would be 6 more attempts after the first tier)
		      
		maybe make a lockout(minutes) function to help with this

	

	Add versioning to css and js filenames
		This allows caching but prevents stale cache items

	Make an admin only page that shows the hit count

	Make an image directory global variable
		for production set it to:  /var/www/html/imgs
		for development set it to: c:\code\lang\rust\proj\blogr\static\imgs
		use this when making dropdowm img menu
	Maybe make a dropdown (select) box for choosing an image for each article
		Could also choose randomly and eliminate the choice
		Could also choose based on the tags
		Could also choose based on the first letter of the title


	Add image input field to create and edit forms

	Add image field to javascript preview function(s)

	Change initial size of title input fields to be much smaller

	NO - Display generation time in ms instead of seconds

	Find better system for development/production variables
		Maybe serialized file, toml/yaml/haml/json/hjson (just not binary - not msgpack)
		Maybe use conditional compilation to read the appropriate files
			https://doc.rust-lang.org/reference/attributes.html
			#[cfg(any(unix, windows))]
			#[cfg(target_os = "macos")]
			#[cfg(unix)]
		Could also use conditional compilation but instead of testing for unix or windows
			test to see if a variable was passed while building it
				create a shell script that runs the 'cargo build --release'
					but with --cfg PRODUCTION  or  --cfg 'BUILD_TARGET="PRODUCTION"'
	Make manage page display each manage item on a new line for mobile devices
		use col-md-#

	Make Blog title either smaller or overflow over the side
		Make font smaller but for medium or larger displays make it the original size
	
	Setup an ftp server on VPS

	Should human readable times have a leading zero? Yes

	Add a noscript note on addd and edit pages saying that different markup parser will be used if
		javascript is disabled and the rendered output may differ from the javascript version

	Make an admin route that will download a backup of the sql database
	Make an admin route that will download a copy of the rust web app (everything but the /target folder)

	Viewing the layout on a mobile device is BROKEN

	Add <meta> metadata keywords and descriptions

	Copy edit page into create page but remove default value attributes

	Get VPS

	maybe just remove the /search route as the search form already works
		and the complex search featuers don't really work yet anyways
	
	remove the test routes - compression and hit counters

	Add pagination to author page too
		And view tag
		NOT - And search?

	Add a 'Read More' or 'See Full Article' link when listing multiple articles

	Does blogr search page show a form with the date range?
		I can't even remember, prolly not.

	Allow admin to delete posts and edit them

	Throttle brute force login attempts

	No - Maybe add a preview as a popup modal [for creating posts?]
		display single article template in the modal template? (just the <article> and <script> tags)

	Search pagination - not sure how to proceed
	    -Need to be able to pass the search query to link
	    -Reverting back for now

		Create a new template for paginated search
			Create a new Pagination type named SearchPages
			override the link method to 
			Do not take Page<Pagination> but instead take Page<SearchPages>
			
			NOT - For the paginated search page add the search query to the search button using javascript

	 Add a database function that will take an article's description and body
		if the description exists return that otherwise return a truncated body
			if pg doesn't support nullable params then lookup the row by aid ( description(aid) )

	Test collate module's sql

	Either change the create template to take an optional Page parameter
	or make a new template for Editing an article
		need to make sure form url points to edit route with the specified aid
		prolly just create new template
	
	Items Per Page Selector Errors:
		page 2 @ 6ipp	=> 8ipp 	page=2&ipp=8

	Add edit to article template

	Add a Items Per Page dropdown menu next to pagination links

	Make a delete route that will do a confirm before deleting
		or use javascript to confirm the action before continuing
	
	Article Template: Add edit link below the title and below the tags to the article template
		
	Maybe hardcode the tag and search links/form to go to the non querystring pages
		instead of relying on redirection, although should leave redirections there in case	
	
	NO - not needed. Add javascript to sort the tables

	Research how to use pieces of other templates in handlebars templates
		so that each template only needs the minimum amount of code
		-Will need to make separate partials for article vs articles due to the {{../}} part

	Add a route that looks up an article by the date [and category] and name
		convert spaces to - and remove non-word characters
		route: /post/2017/12/02/

	
	No - preview has a link.  Maybe add link on the edit page to view the original post (in new tab/window)

	Only allow delete from the manage page

	Add manage page
	
	Add pagination to search page
		Redirect from the route /search?q=... to /search/q
			which will fix all problems with routes and querystrings

		
	Add a noscript message by the preview button

	On manage page make dimmed description icons dark red for articles with no description


	NO - using button - For the edit/create page use the pagination html/css to switch between html/md/raw views
		just use the active page css class with the current view

	
	Add hidden input that tells the rust app whether javascript processed the body contents as
	markdown already or if the js failed or was disabled and the contents need to be converted yet
		If markdown box is checked and the processed hidden input is false
			 then have rust convert it from markdown to html

	Do no need a markdown editor - just use a converter to go from markdown to html
	OR use a markdown parser to convert from

	Make a data type that will track hits and unique visitors
		the data type will implement FromRequest which will give it access to the Request
		The Request will allow access to the global rocket state


	
	Need to allow markdown column in the data structure and template

	In the FromRequest guard, make the hit counter counter hits for individual articles
		and maybe even tags
			/author/<id>
			/search/<searchstr>
			/article/<aid>
			/tag/<tag>

	If body is empty but markdown is not then generate the html using rust
		use a CommonMark crate to process the html
	JS will generate different (maybe better?) results so rely on that first

	Does saving work correctly?  - is the html filtered/sanitized out?


	Edit and Create pages
	When editing:
	check markdown box if the markdown column is not empty
	Check to see if the frist non-whitespace characters are ** or __ or other markdown characters
		if so then check the markdown box
	when saving if the markdown box is NOT checked then delete the contents of the markdown column
		
	When creating:
	check markdown box by default

	Add a checkbox to indicate whether the contents should be parsed as markdown or not
		Display a warning box when going from markdown to html saying that once going to html
			you cannot go back to markdown easily 
				not until the html to markdown parser is done
	
	Implement a js and rust markdown parser
		Could make a custom html <-> markdown parser which could add custom markdown for 
		custom html code in the blog

	Make a simple html to markdown converter
		when saving a page that has a null markdown column and the markdown box is checked
		convert from html to markdown to store the converted contents in the markdown column
		
		https://github.com/domchristie/to-markdown/tree/turndown
		https://github.com/domchristie/turndown-plugin-gfm

		or maybe
		https://github.com/netgusto/upndown
	

	Set the password field to have focus when login attempt fails
	Set username field to have focus when logging in without retry
	
	
	Add a attempts and lockout fields in the user database, which can be null and would be set to a datetime
		if it is not null do not allow successful login until the time has passed
			set a flash message explaining the timeout
		attempts counts the number of continuous attempts to login without success
			every x attempts lock it, do not clear the attempts until successful login
	
	Use the rocket-file-cache crate to cache static files
		https://crates.io/crates/rocket-file-cache

	If a user is signing in as an admin or regular user and has already signed in as another user type
		check if the usernames/userid match, otherwise remove the old cookie
		This prevents a user from being logged in as two separate users with different user types
		Maybe set a flash message saying that the other user was logged out or something
	
	Change search, article, and articles templates to show an author.
		Update the database to link each article to an author
		Update the RSS page to reflect the author for each article, use a join query to get the author
	


	Add pagination and limit number of articles shown in the following pages:
		front page
		search
		individual tag page (lists just one tag)
	Pagination will work by creating a type that stores:
		current page (offset = rpp*page)
		results per page  (limit = rpp)
			could set a limit in the type name
				could do something like Pagination50 for a pagination type that 
				maxes out at 50 results per page
		
		must retrieve num of rows in the route
		then call a method to generate the links
			Pagination.nav_links(route="/route", num_results=213, relative_pages=3)
			relative_pages is how many pages before and after the current page to show
		
		First page:
		SELECT * FROM articles ORDER BY posted DESC LIMIT 10 OFFSET 0
		Any other page:
		SELECT * FROM articles ORDER BY posted DESC LIMIT 10 OFFSET rpp*page
		
		make a new method for the Pagination type so routes that have no query string
			and are the first page can generate links with the new instance of Pagination

	Nah - Add a TL;DR: section of articles
		Should be optional (nullable in the database)
		Should also be included in the full-text column
	
	Add article "types"
		The Markdown type will interpret the article contents as markdown and format it into HTML
			Maybe index all h1 (# or Text\n====) and h2 (## or Text\n-----)
				For each header add a <a name="lowercase_underscored_header">Header</a>
				Maybe add a vertical menu using the scrollspy bootstrap plugin thingy
		The HTML type will leave it as is, unprocessed
	
	Not Needed [Pagination] - Limit tags to only show top 50 tags, or maybe make a separate page that shows all of them

	Add a email/contact links at the bottom of the page in the footer
		Maybe change add an email link in the name of the copyright
		(c) 2017 <a href="">Andrew Prindle</a>
	
	Maybe: Add author to the homepage (multiple articles) instead of just on the single article?

	Add a 404 page, maybe other error pages as well
		#[error(404)] I believe it is
	
	Update RSS, add the author field
	
	Add an author page which shows all articles by that user
		Do not need a page to show author info, there is not enough info in the db about each user to display a full page
		
	Add author when submitting a new article, read the AdministratorCookie's user id
		
	Maybe add email addresses?  The RSS author field is supposed to be an email. 
		Probably not as it would increase spam

	Add author link in article/articles
		show author in articles
		in the templates show a link to a page that will list all articles by that user
	
	Make the templates display the user's display name if it is not None (it is an option field) otherwise the username

	Fix the templates, new rocket-auth-login code needs to have admin/user data sent to it 
		to render the template with the correct permissions
	
	Change menu items to reflect new login pages

	Add compression?
		Could use the zopfli crate for the gzip/deflate algorithm?
		https://github.com/SergioBenitez/Rocket/issues/195
		Make sure the AcceptEncoding allows compression, use the following as a reference:
			https://mmstick.tk/post/jmP

	Add content expiration headers?

	Convert from the simple-auth to my rocket-auth-login crate for authentication and login processing

	Change the blogr database password to a text column called pass
	Add a text column called salt to the database
	Add a trigger and function to hash the password with the salt on insert or update
	Change sql for authentication to check for the salted password hash

	Convert sanitize functions to using the unicode_segments crate

	Fix the admin menu logout to direct the user to admin_logout instead of logout

	Rename/remove the pages_administrator module

	Make a Request Guard (from_request) that creates a start (Instance) variable
		This has the added benefit of being able to start a timer then call
			another route's function using the same timer, this allows
			the timer to be started in a different function than the template
		so the route does not have to declare the start variable itself for timing
		it just needs to declare the timer type in the funciton signature

	Login is broke, ran sql statement generated by login authentication but no resulst in pgadmin.	
			Not sure why but the password isn't getting hashed correctly or something

	Express
		Express::compress() only works on strings not templates!
			At least that what it seems is the reason compression is not working
				Yes that is the problem.  It works fine with strings.  Rewrite!!!
			Make the new responder compress static files/strings with the data
			Make the templates compress the response body data
			
			
			
		Move actual compression into the responder, set compression with the compression() method of Express
		Maybe check if pages load faster if compression is handled inside the Responder (respond_to() method)
			Instead of during the route
		
		Check for other ways to convert from Template to String other than template.show()
			Note: Docs say its slow and even without compression its slow (1.2 seconds to load mainly just the layout)
			Wrap the template responder inside the Express responder, use express.join(template.respond_to(req))
			
		Maybe add a way to change compression method priorities as long as they are supported
		DO NOT combine AcceptEncoding and Responder (keep purity of responder)
			Combine the AcceptEncoding and Responder (both use the request parameter)
		Compile as release
		Maybe stream the results of the responder in large files
			https://api.rocket.rs/rocket/response/trait.Responder.html
			Stream::from(Cursor::new(string))
		Maybe use streamed_body
			https://api.rocket.rs/rocket/response/struct.ResponseBuilder.html#method.streamed_body
		Wrap the template responder inside the Express responder
		Timings:
			Gzip: ~200-300ms for compress

	Fix viewing of single articles - broke when users table changed

	DO NOT  make password a byte vector, Vector<u8> instead of String
		the password comes in as a plaintext string, the only place it is
		not a string is in the database, and the database takes care of all
		of the hasing and salting stuff so keep the password a string!!!!!!

	Change passwords from using a simple hash to a hash(salt + password)
		make a database column called salt
		the salt is randomly generated and concatenated to the plaintext password before hashing
		the hash of the password+salt is what is stored in the database

	Add a method/helper function to retrieve an article and user from a qry
		retrieve the data from the raw qry
		returns a result <Article/User, String>
		maybe make a trait that defines methods on Strings?? for retrieving stuff like
			.retrieve_article()
	
	Add RSS feed (add link in footer)
		Maybe add clipboard.js to copy the link when clicked
	
	Add the article title in the url when possible
		change the links to the articles to include a substring of the title
		change the article page route to have a segment that ignores the title?

	
	Display a page that lists the tags, maybe even sort by number of posts each has
	
	DOES NOT WORK: localhost:8000/tag?tag=
		But should it??? Not really...

	Maybe add a page option in the hbs_template() function
		indicates which page should be highlighted in the nav bar

	Change description in insert form to text input box with maxlength=250
		Change maxlength in database as well
	
	Posting articles: maybe add a javascript function to alert the user when spaces are detected in the tag field but no commas are found
		Display: Did you mean to use commas instead of spaces?

	CONVERT TO HANDLEBARS OR MUSTACHE TEMPLATES
	Customize the navigation link
	Make the menu link to:
	view
	tags - create new page that list the unique tags, maybe even sort by number of posts each has
	insert - for admins
	login - for users who are not logged in
		if user either admin or regular user do not display login, whichever cookie is set determines the userlevel
	signup - create signup page

		Add dropdown menu for admin
			New Article
			Logout
		Add dropdown menu for user
			My Info
			My Comments
				for each artile the user has commented on:
					shows article title (that links to the article)
					a list of comments made by the user
					an edit/delete button for that comment

			Logout

		Add custom <title> tag text for each page??
			Replace the title with a page specific one
			For /article?<aid> make the title equal to VishusBlog: <article title>

	Add messages (msg) to general-template, article-template
	
	Eventually change the index page to list blog articles and show a login link elsewhere like in the nav

	Reduce margins for mobiles
	if landscape reduce nav brand font size

	Change validation to use jQuery and Bootstrap - looks sooo pretty

	Change tags from text to character varying[] (array of varchars)
		Make a tag column that will be the new tags

	Maybe add a number of tabs at the beginning of each line of body text in the template() function
		The number of tabs to be determined by the layout
	
	IMPORTANT
	url_decode() the strings FromForm implementation for ArticleForm
		They are being saved as url_encoded() strings in the database

	JAVASCRIPT
	Add a second password box that has no placeholder text and has display: none
		when form is submitted set display: none to current password box and enable the hdiden one
	Also set submit button to disablabled after validating

	Style the insert form with bootstrap forms
	
	Auto resize the article body text box height when text height is larger than the box's

	Called init_pg_pool in main on program startup to avoid the extra 80ms delay it takes
	Changed user parameter from Option<UserCookie> to AdminCookie
	Added unauthorized_post()

	Add Description field
	
	Only show a shortened body or description for tag and view pages

	Make the template() function take a String instead of a &str
		The String will not be used anymore so its ok to move its ownership
		The &str needed to be converted to a String anyways
		NEVERMIND - passing in a &str is better
			Passing as a string needs to pass it as a reference anyways
			Only thing it does it erase the passed in variable when it doesnt need to
	




	Maybe remove all the is_admin is_user username fields for the article templates
		Use javascript to add the edit/delete options
		But in the route check the correct cookie is set for that action


	Add Tls/Ssl using Let's Encrypt
		https://mmstick.tk/post/q42
		https://rocket.rs/guide/configuration/#configuring-tls
		https://api.rocket.rs/rocket/config/struct.Config.html#method.set_tls
	Sanitizing strings
	Make an actual layout
	Maybe implement a cache
	maybe implement a file cache
		This would allow files to be served even when the url
		is a folder in root.  CSS & JS files for example will
		not work correctly if the url is: 
		localhost/view/category/blah
	Finish implementing the Usertype module, make it an enum that holds whatever?



Blogr Theme
	NO - Maybe add like triangle to the corner or something like: (use trans parent bgs ?)
		____________________
		|Blog__________    |
                |___/          \___|
		|   |          |   |
		|   | content  |   |
		|   |          |   |
		|   |          |   |

	Maybe for multiple article pages show a scrollbar (overflow: scroll) and customize the scrollbars 
		only for chrome, do not add scrollbars for other browsers
	Maybe add height: 100% to html, body 
		then add height: 60% to mainWrapper 
		then height: 100% to v-body and v-content



TESTS
	Test if two datastructures that are defined the exact same but defined
		in different modules are compatible
	
	
	
	

